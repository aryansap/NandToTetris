// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.

    //a address will also be the out m
    //basically for the a register there is a mux which has whatever alu output, and then a will also lead to the alu output
    //oppcode is the thingie that determince either a or c instruction, a is 0 which means whatever value u have is loaded into a
    //if opcode is 1 we want to use the mux to route the output of the alu into the A register
    //rewatch the videos on hack assembly to remember the shitter 
    //A register gets 5, and then d gets 4 and then writeM gets 3??
     //last 3 bits are jump bits, if 111, then jump unconditional, 000, means no jump, other combinations 
     //represent conditional go to so check out the hack specifications this will be used for the PC
     // load = f(jump bits, alu outputs), bascially the load pin is determined by the 
     //specification of what the jumpbits and the conditionals are

    Not(in=instruction[15], out=Ainst);
    
    And(a=instruction[15], b=instruction[5], out=ALUinA);   
    Mux16(a[15] = false, a[0..14]=instruction[0..14], b=ALUout, sel=ALUinA, out=inA);
    Or(a=Ainst, b=ALUinA, out=loadA);    // load A if A-inst or C-inst&dest to A-reg
    ARegister(in=inA, load=loadA, out[0..14]=outAnum, out[0..14]=outAPC,out = outA, out[0..14] = addressM[0..14]);
 

    And(a=instruction[15], b=instruction[4], out=loadD);

    And(a = instruction[15], b = instruction[3], out = writeM);

     Mux16(a = outA, b = inM, sel = instruction[12], out = muxmora); //this controlls the input into the ALU to be either whatever is in the a register or the M register
     DRegister(in = ALUout, load = loadD, out = outD);
     //I THINK CODE IS GOOD AFTER THIS
     ALU(x = outD, y = muxmora, zx = instruction[11] , nx =instruction[10], zy =instruction[9], 
     ny =instruction[8] ,f = instruction[7], no = instruction[6], zr = zr, ng = ng, out = ALUout, out = outM);

     
     PC(in[15] = false, in[0..14] = outAPC, inc = notfunc, load = func, reset = reset, out[0..14] = pc);
     
     //Here I am calculating what the PC load bit (func) would be and whether or not we can jump to the value in the A register. If func is 0, 
     //we increment the pc normally, if not we jump the pc to the value of the A register. 
    
     Not(in = ng, out = notng);
     Not(in = zr, out = notzr);
     And(a = instruction[1], b = zr, out = outzr);
     And(a = instruction[0], b = notng, out = outpomaybe0);
     And(a = outpomaybe0,b = notzr, out = outpo);
     And(a = instruction[2],b = ng, out = outng);
     Or(a = outzr,b = outpo, out = outim);
     Or(a = outim, b = outng, out = inter);
     And(a = instruction[15], b = inter, out = func);
     Not(in = func, out = notfunc);

}