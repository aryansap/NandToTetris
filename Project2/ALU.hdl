// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    //// Replace this comment with your code.
    //if statement trick, if its true then And16(a = input, if true, put 1, if false put 0, so u can just put the specific bit)
    //so for zx we can And16(a = x, b = zx -- figure out how to do all 1s or all 0s)
    Mux16(a = x, b = false, sel = zx, out = x1);
    Not16(in = x1, out = x1not);
    Mux16(a = x1, b = x1not, sel = nx, out = x2);
    Mux16(a = y, b = false, sel = zy, out = y1);
    Not16(in = y1, out = y1not);
    Mux16(a = y1, b = y1not, sel = ny, out = y2);
    Add16(a = x2, b = y2, out = xyadded);
    And16(a = x2, b = y2, out = xandy);
    Mux16(a= xandy, b = xyadded, sel = f, out = out3);

    Not16(in = out3, out = notout);
    Mux16(a = out3, b = notout, sel = no, out = outIntermediate);

    // Assign final output
    Mux16(a = outIntermediate, b = outIntermediate, sel = false, out = out);

    // Step 5: Determine zr (zero result)
    ZrChip(outIntermediate = outIntermediate, out = zr);
    // Step 6: Determine ng (negative result)
    // ng is true if the most significant bit (MSB) is 1
    NgChip(outIntermediate = outIntermediate, out = ng); 

   




}